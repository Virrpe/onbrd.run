name: CI
on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write

jobs:
  build-verify:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Enable corepack & install pnpm
        run: |
          corepack enable
          npm i -g pnpm
          node -v
          npm -v
          pnpm -v
          pwd
          ls -la

      - name: Install deps
        run: pnpm -w install

      - name: Build (extension only)
        run: pnpm --filter @onboarding-audit/extension run build || pnpm -C extension run build

      - name: Verify MV3 extension invariants (Node-only)
        run: |
          set -euo pipefail
          echo "=== Verifying MV3 Extension Invariants ==="
          
          # 1. No content_scripts in manifest
          echo "Checking for content_scripts in manifest..."
          node -e "
            const fs = require('fs');
            const manifestPath = 'extension/dist/manifest.json';
            if (!fs.existsSync(manifestPath)) {
              console.error('MISSING manifest.json');
              process.exit(1);
            }
            const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
            if (manifest.content_scripts) {
              console.error('FOUND content_scripts in manifest');
              process.exit(1);
            }
            console.log('✅ No content_scripts in manifest');
          "
          
          # 2. Service worker is built JS (not .ts)
          echo "Checking service worker file extension..."
          node -e "
            const fs = require('fs');
            const manifestPath = 'extension/dist/manifest.json';
            const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
            const sw = manifest.background?.service_worker;
            if (!sw || !sw.endsWith('.js')) {
              console.error('Service worker must be built JS, got:', sw);
              process.exit(1);
            }
            console.log('✅ Service worker is built JS:', sw);
          "
          
          # 3. Content script is single IIFE at extension/dist/assets/content.js with no top-level import/export
          echo "Checking content script IIFE format..."
          node -e "
            const fs = require('fs');
            const contentPath = 'extension/dist/assets/content.js';
            if (!fs.existsSync(contentPath)) {
              console.error('MISSING content.js');
              process.exit(2);
            }
            const content = fs.readFileSync(contentPath, 'utf8');
            if (!(content.startsWith('(function()') || content.startsWith('(()=>') || content.includes('!function('))) {
              console.error('NOT IIFE format');
              process.exit(3);
            }
            if (/^\\s*(import|export)\\s/m.test(content)) {
              console.error('FOUND import/export in content script');
              process.exit(4);
            }
            console.log('✅ Content script is IIFE with no import/export');
          "
          
          # 4. Permissions exactly ["activeTab","scripting","storage"]
          echo "Checking exact permissions..."
          node -e "
            const fs = require('fs');
            const manifestPath = 'extension/dist/manifest.json';
            const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
            const perms = manifest.permissions || [];
            const expected = ['activeTab', 'scripting', 'storage'];
            if (JSON.stringify(perms) !== JSON.stringify(expected)) {
              console.error('Permissions mismatch. Expected:', expected, 'Got:', perms);
              process.exit(1);
            }
            console.log('✅ Permissions are exactly:', perms);
          "
          
          # 5. Filename regex validation for audit reports
          echo "Checking filename regex pattern..."
          node -e "
            const sample = 'onboarding-audit-example.com-202501011230.html';
            if (!/^onboarding-audit-[a-z0-9.-]+-\\d{12}\\.html$/.test(sample)) {
              console.error('FILENAME REGEX FAIL');
              process.exit(5);
            }
            console.log('✅ Filename regex pattern OK');
          "
          
          echo "=== All MV3 invariants verified successfully ==="

      - name: Run full verification suite
        run: pnpm -w run verify

      - name: Emit logs and debug info
        if: always()
        run: |
          echo "=== Build Artifacts Debug Info ==="
          echo "=== dist listing ==="
          ls -la extension/dist || true
          echo "=== assets listing ==="
          ls -la extension/dist/assets || true
          echo "=== content.js head (200 bytes)==="
          head -c 200 extension/dist/assets/content.js || true
          echo
          echo "=== manifest excerpt ==="
          node -e "
            const fs = require('fs');
            const manifestPath = 'extension/dist/manifest.json';
            if (fs.existsSync(manifestPath)) {
              const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
              console.log('permissions:', JSON.stringify(manifest.permissions));
              console.log('content_scripts:', JSON.stringify(manifest.content_scripts || null));
              console.log('service_worker:', manifest.background?.service_worker);
            }
          " || true
          echo "=== Build complete ==="

      - name: Upload debug snapshot
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-debug-${{ github.run_id }}
          path: |
            extension/dist/**
            extension/dist/manifest.json
            extension/dist/assets/content.js
          if-no-files-found: warn

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-logs-${{ github.run_id }}
          path: |
            ci.log
            *.log
          if-no-files-found: ignore
