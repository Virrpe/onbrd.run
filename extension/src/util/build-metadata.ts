/**
 * Build metadata utilities for tracking build information
 */

// Default values for development
const DEFAULT_BUILD_ID = `dev-${Date.now()}`;
const DEFAULT_MODE: 'local' | 'cloud' = 'local';
const DEFAULT_RULESET_HASH = 'unknown';
const DEFAULT_RULESET_VERSION = '1.1.0';

// Build metadata interface
export interface BuildMetadata {
  buildId: string;
  mode: 'local' | 'cloud';
  rulesetHash: string;
  rulesetVersion: string;
  rulesetUpdatedAt: string;
}

/**
 * Get build metadata from environment variables or defaults
 */
export function getBuildMetadata(): BuildMetadata {
  // Try to read the weights hash from file if available
  let rulesetHash = DEFAULT_RULESET_HASH;
  let rulesetVersion = DEFAULT_RULESET_VERSION;
  const rulesetUpdatedAt = '2025-09-15T18:30:00Z';

  try {
    // In a browser extension, we can't use fs directly, so we'll use a different approach
    // For now, we'll use the build-time constants or defaults
    if (typeof RULESET_HASH !== 'undefined') {
      rulesetHash = RULESET_HASH;
    }
    if (typeof RULESET_VERSION !== 'undefined') {
      rulesetVersion = RULESET_VERSION;
    }
  } catch (e) {
    // Use defaults if build constants are not available
  }

  return {
    buildId: typeof BUILD_ID !== 'undefined' ? BUILD_ID : DEFAULT_BUILD_ID,
    mode: typeof MODE !== 'undefined' ? MODE : DEFAULT_MODE,
    rulesetHash,
    rulesetVersion,
    rulesetUpdatedAt
  };
}

/**
 * Get a formatted footer string for reports
 */
export function getReportFooter(): string {
  const metadata = getBuildMetadata();
  const timestamp = new Date().toISOString().slice(0, 16).replace('T', ' ');
  
  return `Generated by Onbrd — v${metadata.rulesetVersion} — ${metadata.rulesetHash.substring(0, 8)} — ${metadata.mode} — ${timestamp}`;
}

/**
 * Get short build info for display
 */
export function getShortBuildInfo(): string {
  const metadata = getBuildMetadata();
  return `${metadata.rulesetVersion} (${metadata.rulesetHash.substring(0, 8)}) ${metadata.mode}`;
}