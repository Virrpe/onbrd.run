const u="";const f=[1,5,15,30,60,120];async function d(t){await chrome.storage.session.set({onbrd_benchmark:t})}async function h(t){const{onbrd_queue:e=[]}=await chrome.storage.local.get("onbrd_queue");e.push({body:t,tries:0,nextAt:Date.now()}),await chrome.storage.local.set({onbrd_queue:e})}async function c(){const{onbrd_queue:t=[]}=await chrome.storage.local.get("onbrd_queue"),e=Date.now(),n=[];for(const r of t){if(r.nextAt>e){n.push(r);continue}try{const o=await fetch(`${self.API_BASE_URL||u}/api/v1/ingest`,{method:"POST",headers:{"content-type":"application/json"},body:JSON.stringify(r.body)});if(o.ok){const i=await o.json();await d(i);continue}throw new Error("http "+o.status)}catch{r.tries++;const o=Math.min(r.tries-1,5),i=f[o];r.nextAt=Date.now()+i*60*1e3,r.tries<5&&n.push(r)}}await chrome.storage.local.set({onbrd_queue:n})}self.addEventListener("online",()=>{c()});setInterval(c,6e4);chrome.runtime.onMessage.addListener((t,e,n)=>(t==null?void 0:t.type)==="ONBRD_ENQUEUE_INGEST"?(h(t.body).then(()=>{n({success:!0})}).catch(r=>{n({success:!1,error:r.message})}),!0):(t==null?void 0:t.type)==="ONBRD_FLUSH_QUEUE"?(c().then(()=>{n({success:!0})}).catch(r=>{n({success:!1,error:r.message})}),!0):(t==null?void 0:t.type)==="ONBRD_RUN_AUDIT_ACTIVE_TAB"?((async()=>{try{const[r]=await chrome.tabs.query({active:!0,currentWindow:!0});if(!(r!=null&&r.id))return n({error:"No active tab"});const o=await y(),i=await _("onbrd_benchmark");n({audit:o,benchmark:i||void 0})}catch(r){console.error("[SW] run_active_tab error",r),n({error:r.message})}})(),!0):!1);async function s(){const t=new AbortController,e=setTimeout(()=>t.abort(),300);try{const n=`${self.API_BASE_URL||u}/api/v1/config`,r=await fetch(n,{signal:t.signal});if(clearTimeout(e),r.ok){const o=await r.json();await chrome.storage.session.set({onbrd_cfg:o})}}catch{}}chrome.runtime.onStartup.addListener(()=>{c(),s()});chrome.runtime.onInstalled.addListener(()=>{c(),s()});setInterval(s,6e4);async function l(t){try{await chrome.scripting.executeScript({target:{tabId:t},files:["assets/content.js"]}),console.log("Content script injected successfully")}catch(e){throw new Error(`Failed to inject content script: ${e instanceof Error?e.message:String(e)}`)}}async function a(t){try{const e=await Promise.race([chrome.tabs.sendMessage(t,{type:"PING"}),new Promise((n,r)=>setTimeout(()=>r(new Error("PING timeout")),1e3))]);return e&&typeof e=="object"&&"ok"in e&&e.ok===!0?(console.log("PING successful - content script is responsive"),!0):(console.error(`PING response invalid: ${JSON.stringify(e)}`),!1)}catch(e){return e instanceof Error&&e.message==="PING timeout"?console.error("PING timeout - content script not responding within 1000ms"):console.error(`PING failed: ${e instanceof Error?e.message:String(e)}`),!1}}async function w(t){if(await a(t))return!0;console.error("First PING attempt failed, retrying...");try{await l(t)}catch(r){return console.error(`Failed to re-inject content script: ${r instanceof Error?r.message:String(r)}`),!1}return await a(t)}async function g(t){try{const e=await Promise.race([chrome.tabs.sendMessage(t,{type:"RUN_AUDIT"}),new Promise((n,r)=>setTimeout(()=>r(new Error("RUN_AUDIT timeout")),3e3))]);if(e&&typeof e=="object"&&"ok"in e&&e.ok===!0&&"data"in e)return console.log("RUN_AUDIT successful - audit data received"),e.data;throw e&&typeof e=="object"&&"error"in e?new Error(`Content script error: ${e.error}`):new Error(`Invalid RUN_AUDIT response: ${JSON.stringify(e)}`)}catch(e){throw e instanceof Error&&e.message==="RUN_AUDIT timeout"?new Error("RUN_AUDIT timeout - content script not responding within 3000ms"):e}}async function y(){try{console.log("Starting audit on active tab...");const[t]=await chrome.tabs.query({active:!0,currentWindow:!0});if(!(t!=null&&t.id))throw new Error("No active tab found");if(console.log(`Active tab found: ${t.id}, ${t.url}`),await l(t.id),!await w(t.id))throw new Error("Content script not responding to PING after retry");const n=await g(t.id);return console.log(`Audit completed successfully: ${JSON.stringify(n)}`),n}catch(t){throw console.error(`Audit failed: ${t instanceof Error?t.message:String(t)}`),t}}async function _(t){return new Promise(e=>{try{chrome.storage.session.get(t,n=>e(n==null?void 0:n[t]))}catch{e(void 0)}})}
