"use strict";const t=require("./logger-Cj-gCM2P.js");chrome.runtime.onInstalled.addListener(()=>{t.backgroundLogger.ok("OnboardingAudit.ai extension installed")});chrome.runtime.onMessage.addListener((e,r,o)=>(t.backgroundLogger.start(`Background script received message: ${JSON.stringify(e)}`),e.type==="RUN_AUDIT"?(c(o),!0):!1));async function c(e){try{t.backgroundLogger.start("Starting deterministic handshake...");const[r]=await chrome.tabs.query({active:!0,currentWindow:!0});if(!r.id)throw new Error("No active tab found");if(t.backgroundLogger.ok(`Active tab found: ${r.id}, ${r.url}`),await s(r.id),!await a(r.id))throw new Error("Content script not responding to PING after retry");const n=await g(r.id);t.backgroundLogger.ok(`Audit completed successfully: ${JSON.stringify(n)}`),e({success:!0,data:n})}catch(r){t.backgroundLogger.error(`Deterministic handshake failed: ${r instanceof Error?r.message:String(r)}`),e({success:!1,error:r instanceof Error?r.message:"Audit failed"})}}async function s(e){try{await chrome.scripting.executeScript({target:{tabId:e},files:["assets/content.js"]}),t.backgroundLogger.ok("Content script injected successfully")}catch(r){throw new Error(`Failed to inject content script: ${r instanceof Error?r.message:String(r)}`)}}async function a(e){if(await i(e))return!0;t.backgroundLogger.error("First PING attempt failed, retrying...");try{await s(e)}catch(n){return t.backgroundLogger.error(`Failed to re-inject content script: ${n instanceof Error?n.message:String(n)}`),!1}return await i(e)}async function i(e){try{const r=await Promise.race([chrome.tabs.sendMessage(e,{type:"PING"}),new Promise((o,n)=>setTimeout(()=>n(new Error("PING timeout")),1e3))]);return r&&typeof r=="object"&&"ok"in r&&r.ok===!0?(t.backgroundLogger.ok("PING successful - content script is responsive"),!0):(t.backgroundLogger.error(`PING response invalid: ${JSON.stringify(r)}`),!1)}catch(r){return r instanceof Error&&r.message==="PING timeout"?t.backgroundLogger.error("PING timeout - content script not responding within 1000ms"):t.backgroundLogger.error(`PING failed: ${r instanceof Error?r.message:String(r)}`),!1}}async function g(e){try{const r=await Promise.race([chrome.tabs.sendMessage(e,{type:"RUN_AUDIT"}),new Promise((o,n)=>setTimeout(()=>n(new Error("RUN_AUDIT timeout")),3e3))]);if(r&&typeof r=="object"&&"ok"in r&&r.ok===!0&&"data"in r)return t.backgroundLogger.ok("RUN_AUDIT successful - audit data received"),r.data;throw r&&typeof r=="object"&&"error"in r?new Error(`Content script error: ${r.error}`):new Error(`Invalid RUN_AUDIT response: ${JSON.stringify(r)}`)}catch(r){throw r instanceof Error&&r.message==="RUN_AUDIT timeout"?new Error("RUN_AUDIT timeout - content script not responding within 3000ms"):r}}
